<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="generator"
          content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org" />
    <meta content="text/html; charset=us-ascii"
          http-equiv="content-type" />

    <title>Electric Commander Plugin for REST</title>
    <link rel="stylesheet"
          href="../../plugins/@PLUGIN_KEY@/pluginhelp.css"
          type="text/css"
          media="screen" />
<style>
td
{border-left:1px solid black;
border-top:1px solid black;}
thead
{border-left:1px solid black;
border-top:1px solid black;}
table
{border-right:1px solid black;
border-bottom:1px solid black;}
</style>
</head>

<body>
    <div class="help">


<h1 id="toscaci-plugin-version-100">EC-AppDynamics</h1>

<h3 id="appdynamics-plugin-version-100">Plugin Version 1.0.0</h3>

<hr/>

<p><strong>The AppDynamics Application Analytics</strong> solution delivers a real-time analytics platform for IT (dev, ops) teams and business owners looking for actionable insights into IT operations, customer experience and business outcomes. Automatically collecting and correlating data from any app without requiring code changes (leveraging APM instrumentation and business transaction context). A single solution to collectively analyze application performance, user experience and interaction, and business metrics, and to identify and optimize their intricate interdependencies.</p>

<h3 id="appdynamics-links">AppDynamics links</h3>

<p>More information can be found at <a href="http://www.appdynamics.com/">AppDynamics  <br/>
website</a>.</p>



<h3 id="electric-flow-integration-to-appdynamics-controller">Electric Flow Integration to AppDynamics Controller</h3>

<p>AppDynamics Controller is an application performance monitor solution that receives application and hardware metric using agents and provides a customer with various performance data. EC-AppDynamics integration helps to automate resource management based on monitor data received from Controller. ManageResources procedure allows to deploy/undeploy additional resources dynamically to fully automate application performance management.</p>

<p>The ElectricFlow plugin for AppDynamics supports:</p>

<ul>
<li>business application status handling</li>
<li>automatic resource management</li>
<li>automatic errors handling</li>
</ul>

<h3 id="integrated-version">Integrated Version</h3>

<p>This plugin was developed and tested against: </p>

<ul>
<li>AppDynamics Controller v. 4.1</li>
<li>ElectricFlow server v. 5+, 6+</li>
</ul>

<h3 id="plugin-procedures">Plugin Procedures</h3>

<p><strong>GetAppStatus</strong></p>

<p>This procedure realizes communication with AppDynamics Controller to retrieve data about an application status. It must be restarted by scheduler periodically to provide Flow with the latest application status. This procedure acts as a bootstrap to run descending stages and to set special property 'calls_per_minute' which is used by 'ManageResources' procedure. It's necessary to run GetAppStatus through EC scheduler. You can adjust period of execution to handle resources more accurately. </p>

<p><strong>ManageResources</strong></p>

<p>In this procedure we provide threshold values of a parameter which we will monitor in every particular case. This can be 'calls/min' or ' average_time' for example. Procedure will automatically start descending steps and will provide special property 'resource_control' which are necessary for use in resource management subworkflows to increase/decrease resources. This property describes the necessity of the resource management. It can take three values: '1', '0', '-1'. These values correspond to three situations: 1 - we need to increase (deploy) new resource, 0 - nothing to do, resources stay untouched, -1 - we need to decrease (destroy/deactivate) excess resources. See example workflow to reproduce the dynamic resource management use case. To manage resources increase/decrease strategy properly a customer needs to provide his own subworkflow for these operations.</p>

<h3 id="basic-use-case">Basic use case</h3>

<p>To reproduce the dynamic resource management use case you need to prepare several things. First of all, you need to deploy a few resources to manage, configure the load balancer (for ex. HAProxy), set up AppDynamics agents (manually) to each resource. If all infrastructure is configured properly, Controller will start to draw monitor data after a while. Second, you need to prepare ElectricFlow to communicate with Controller. To do this you need to use EC-AppDynamics 'GetAppStatus' procedure with Flow scheduler. Adjust a periodical run that will suit your needs. Make sure that scheduler will run a workflow related to the dynamic resource management. This workflow will be driven by the special property from GetAppStatus. Next, you need to create a step on initial stages of the workflow with 'ManageResources' procedure.</p>

<p>Here is the  top level diagram of the dynamic resource management use case:</p>

<img src="../../plugins/@PLUGIN_KEY@/images/dynamic_resource_management.jpg" border="0" />


<p>A sample of use case workflow:</p>


<img src="../../plugins/@PLUGIN_KEY@/images/sample_workflow.jpg" border="0" />
<h3 id="release-notes">Release Notes</h3>

<p><strong>EC-AppDynamics-1.0.0</strong></p>

<ul>
<li>Enables monitoring of business applications</li>
<li>Enables resource management based on current business application performance</li>
<li>Provides fully automatic communication with AppDynamics Controller </li>
<li>Errors handling</li>
<li>Configuration Management</li>
</ul>


  </div>
</body>
</html>

